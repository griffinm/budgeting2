services:
  api:
    container_name: budgeting2-api
    build:
      context: .
      dockerfile: Dockerfile.api
    image: budgeting2-api:latest
    restart: always
    ports:
      - "10201:3000"
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://griffin:griffin@postgres:5432/budgeting2_production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: griffin
      DATABASE_PASSWORD: griffin
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: production
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      RAILS_FORCE_SSL: "false"
    networks:
      - prod-network
    volumes:
      - ./storage:/rails/storage
      # Uncomment the line below if you have a valid master.key that matches credentials.yml.enc
      # For Docker deployment, using .env.production is recommended instead
      # - ./config/master.key:/rails/config/master.key:ro

  ui:
    container_name: budgeting2-ui
    build:
      context: .
      dockerfile: Dockerfile.ui
    image: budgeting2-ui:latest
    restart: always
    ports:
      - "10200:80"
    networks:
      - prod-network

  postgres:
    container_name: budgeting2-postgres
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: budgeting2_production
      POSTGRES_USER: griffin
      POSTGRES_PASSWORD: griffin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - prod-network

  redis:
    container_name: budgeting2-redis
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - prod-network

networks:
  prod-network:
    name: prod
    driver: bridge
    external: true

volumes:
  postgres_data:
    name: budgeting2-postgres-data
  redis_data:
    name: budgeting2-redis-data
